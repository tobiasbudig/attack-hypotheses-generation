{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Genetic algorithm \n",
    "\n",
    "## "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import random\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1.  read data in\n",
    "- List of relative frequencies of techniques in X_small\n",
    "- y_train to train the GA\n",
    "- y_validation to later test the GA result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prop</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>T1548.002</th>\n",
       "      <td>0.00493189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1548.001</th>\n",
       "      <td>0.000469704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1134</th>\n",
       "      <td>0.00164396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1134.002</th>\n",
       "      <td>0.00164396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1134.004</th>\n",
       "      <td>0.000234852</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102</th>\n",
       "      <td>0.000469704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102.002</th>\n",
       "      <td>0.00516674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102.001</th>\n",
       "      <td>0.00164396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102.003</th>\n",
       "      <td>0.000704556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1047</th>\n",
       "      <td>0.00868953</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>269 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                  prop\n",
       "T1548.002   0.00493189\n",
       "T1548.001  0.000469704\n",
       "T1134       0.00164396\n",
       "T1134.002   0.00164396\n",
       "T1134.004  0.000234852\n",
       "...                ...\n",
       "T1102      0.000469704\n",
       "T1102.002   0.00516674\n",
       "T1102.001   0.00164396\n",
       "T1102.003  0.000704556\n",
       "T1047       0.00868953\n",
       "\n",
       "[269 rows x 1 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read in excel with techniques and probabilities, sheet X removed latest 20%\n",
    "X = pd.read_excel(\"../reduced_table_with_timestamps_and_props.xlsx\", sheet_name=\"X\", index_col=\"ID\")\n",
    "\n",
    "# extract probabilities from excel and save as pd data frame\n",
    "probs = pd.DataFrame(X.iloc[0])[1:]\n",
    "probs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>ID</th>\n",
       "      <th>S0461</th>\n",
       "      <th>S0465</th>\n",
       "      <th>S0462</th>\n",
       "      <th>S0464</th>\n",
       "      <th>S0466</th>\n",
       "      <th>S0467</th>\n",
       "      <th>S0468</th>\n",
       "      <th>S0469</th>\n",
       "      <th>S0470</th>\n",
       "      <th>S0471</th>\n",
       "      <th>...</th>\n",
       "      <th>S0593</th>\n",
       "      <th>S0592</th>\n",
       "      <th>S0594</th>\n",
       "      <th>S0595</th>\n",
       "      <th>S0596</th>\n",
       "      <th>S0597</th>\n",
       "      <th>S0600</th>\n",
       "      <th>S0599</th>\n",
       "      <th>S0601</th>\n",
       "      <th>S0598</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>T1548.002</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1548.001</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1134</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1134.002</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1134.004</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102.002</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102.001</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1102.003</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>T1047</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>269 rows Ã— 100 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "ID         S0461  S0465  S0462  S0464  S0466  S0467  S0468  S0469  S0470  \\\n",
       "T1548.002    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1548.001    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1134        0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1134.002    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1134.004    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "...          ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "T1102        0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1102.002    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1102.001    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1102.003    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1047        0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "\n",
       "ID         S0471  ...  S0593  S0592  S0594  S0595  S0596  S0597  S0600  S0599  \\\n",
       "T1548.002    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1548.001    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1134        0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1134.002    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1134.004    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "...          ...  ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "T1102        0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    1.0    0.0   \n",
       "T1102.002    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1102.001    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1102.003    0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "T1047        0.0  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0   \n",
       "\n",
       "ID         S0601  S0598  \n",
       "T1548.002    0.0    0.0  \n",
       "T1548.001    0.0    0.0  \n",
       "T1134        0.0    0.0  \n",
       "T1134.002    0.0    0.0  \n",
       "T1134.004    0.0    0.0  \n",
       "...          ...    ...  \n",
       "T1102        1.0    0.0  \n",
       "T1102.002    0.0    0.0  \n",
       "T1102.001    0.0    0.0  \n",
       "T1102.003    0.0    0.0  \n",
       "T1047        0.0    0.0  \n",
       "\n",
       "[269 rows x 100 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read in excel with newest 20 percent of techniques for evaluation\n",
    "y_train = pd.read_excel(\"../reduced_table_with_timestamps_and_props.xlsx\", sheet_name=\"y\", index_col=\"ID\")\n",
    "y_train = y_train.drop(y_train.tail(2).index, axis=0)\n",
    "y_train = y_train.drop(['created'], axis = 1).T\n",
    "y_train\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>260</th>\n",
       "      <th>261</th>\n",
       "      <th>262</th>\n",
       "      <th>263</th>\n",
       "      <th>264</th>\n",
       "      <th>265</th>\n",
       "      <th>266</th>\n",
       "      <th>267</th>\n",
       "      <th>268</th>\n",
       "      <th>269</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.015059</td>\n",
       "      <td>0.103402</td>\n",
       "      <td>0.238980</td>\n",
       "      <td>0.270487</td>\n",
       "      <td>0.127714</td>\n",
       "      <td>0.328829</td>\n",
       "      <td>-0.015059</td>\n",
       "      <td>0.110425</td>\n",
       "      <td>0.056578</td>\n",
       "      <td>...</td>\n",
       "      <td>0.115306</td>\n",
       "      <td>0.025799</td>\n",
       "      <td>0.167711</td>\n",
       "      <td>0.014296</td>\n",
       "      <td>-0.015059</td>\n",
       "      <td>-0.032176</td>\n",
       "      <td>0.028190</td>\n",
       "      <td>0.094802</td>\n",
       "      <td>-0.021340</td>\n",
       "      <td>0.075569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.015059</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>-0.008197</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>-0.011689</td>\n",
       "      <td>-0.007084</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.014438</td>\n",
       "      <td>-0.009642</td>\n",
       "      <td>-0.016246</td>\n",
       "      <td>-0.010911</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.014751</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>-0.020961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.103402</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.207759</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>0.229665</td>\n",
       "      <td>-0.017513</td>\n",
       "      <td>0.229665</td>\n",
       "      <td>0.146032</td>\n",
       "      <td>-0.015136</td>\n",
       "      <td>...</td>\n",
       "      <td>0.039559</td>\n",
       "      <td>-0.020600</td>\n",
       "      <td>0.028669</td>\n",
       "      <td>-0.023313</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.018595</td>\n",
       "      <td>0.037540</td>\n",
       "      <td>-0.019621</td>\n",
       "      <td>-0.012333</td>\n",
       "      <td>0.108543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.238980</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>0.207759</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.229665</td>\n",
       "      <td>0.229665</td>\n",
       "      <td>0.222324</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>0.231536</td>\n",
       "      <td>-0.015136</td>\n",
       "      <td>...</td>\n",
       "      <td>0.109965</td>\n",
       "      <td>-0.020600</td>\n",
       "      <td>-0.034711</td>\n",
       "      <td>-0.023313</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.018595</td>\n",
       "      <td>0.037540</td>\n",
       "      <td>-0.019621</td>\n",
       "      <td>-0.012333</td>\n",
       "      <td>0.108543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.270487</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>0.229665</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>0.244369</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>0.168394</td>\n",
       "      <td>-0.007084</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.014438</td>\n",
       "      <td>-0.009642</td>\n",
       "      <td>-0.016246</td>\n",
       "      <td>-0.010911</td>\n",
       "      <td>-0.004073</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.014751</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>0.086683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>-0.032176</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.018595</td>\n",
       "      <td>-0.018595</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>-0.017513</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>0.060529</td>\n",
       "      <td>-0.015136</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.030847</td>\n",
       "      <td>0.081985</td>\n",
       "      <td>-0.034711</td>\n",
       "      <td>0.067903</td>\n",
       "      <td>-0.008703</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.031517</td>\n",
       "      <td>-0.019621</td>\n",
       "      <td>-0.012333</td>\n",
       "      <td>0.108543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>0.028190</td>\n",
       "      <td>-0.014751</td>\n",
       "      <td>0.037540</td>\n",
       "      <td>0.037540</td>\n",
       "      <td>-0.014751</td>\n",
       "      <td>0.130694</td>\n",
       "      <td>-0.029684</td>\n",
       "      <td>-0.014751</td>\n",
       "      <td>0.009842</td>\n",
       "      <td>0.058663</td>\n",
       "      <td>...</td>\n",
       "      <td>0.076596</td>\n",
       "      <td>0.027679</td>\n",
       "      <td>0.134530</td>\n",
       "      <td>-0.039513</td>\n",
       "      <td>-0.014751</td>\n",
       "      <td>-0.031517</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.163488</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>0.017649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>266</th>\n",
       "      <td>0.094802</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.019621</td>\n",
       "      <td>-0.019621</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.018480</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.026353</td>\n",
       "      <td>0.115259</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.032550</td>\n",
       "      <td>0.075684</td>\n",
       "      <td>0.143943</td>\n",
       "      <td>-0.024599</td>\n",
       "      <td>-0.009183</td>\n",
       "      <td>-0.019621</td>\n",
       "      <td>0.163488</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.013014</td>\n",
       "      <td>0.001280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>267</th>\n",
       "      <td>-0.021340</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>-0.012333</td>\n",
       "      <td>-0.012333</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>-0.011616</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>-0.016564</td>\n",
       "      <td>-0.010039</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.020459</td>\n",
       "      <td>0.139425</td>\n",
       "      <td>-0.023022</td>\n",
       "      <td>-0.015462</td>\n",
       "      <td>-0.005772</td>\n",
       "      <td>-0.012333</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>-0.013014</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.046567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>268</th>\n",
       "      <td>0.075569</td>\n",
       "      <td>-0.020961</td>\n",
       "      <td>0.108543</td>\n",
       "      <td>0.108543</td>\n",
       "      <td>0.086683</td>\n",
       "      <td>0.086683</td>\n",
       "      <td>0.066127</td>\n",
       "      <td>-0.020961</td>\n",
       "      <td>0.248749</td>\n",
       "      <td>0.025949</td>\n",
       "      <td>...</td>\n",
       "      <td>0.052884</td>\n",
       "      <td>0.135690</td>\n",
       "      <td>0.116751</td>\n",
       "      <td>0.108620</td>\n",
       "      <td>-0.020961</td>\n",
       "      <td>0.108543</td>\n",
       "      <td>0.017649</td>\n",
       "      <td>0.001280</td>\n",
       "      <td>0.046567</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>269 rows Ã— 269 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          1         2         3         4         5         6         7    \\\n",
       "0    1.000000 -0.015059  0.103402  0.238980  0.270487  0.127714  0.328829   \n",
       "1   -0.015059  1.000000 -0.008703 -0.008703 -0.004073 -0.004073 -0.008197   \n",
       "2    0.103402 -0.008703  1.000000  0.207759 -0.008703  0.229665 -0.017513   \n",
       "3    0.238980 -0.008703  0.207759  1.000000  0.229665  0.229665  0.222324   \n",
       "4    0.270487 -0.004073 -0.008703  0.229665  1.000000 -0.004073  0.244369   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "264 -0.032176 -0.008703 -0.018595 -0.018595 -0.008703 -0.008703 -0.017513   \n",
       "265  0.028190 -0.014751  0.037540  0.037540 -0.014751  0.130694 -0.029684   \n",
       "266  0.094802 -0.009183 -0.019621 -0.019621 -0.009183 -0.009183 -0.018480   \n",
       "267 -0.021340 -0.005772 -0.012333 -0.012333 -0.005772 -0.005772 -0.011616   \n",
       "268  0.075569 -0.020961  0.108543  0.108543  0.086683  0.086683  0.066127   \n",
       "\n",
       "          8         9         10   ...       260       261       262  \\\n",
       "0   -0.015059  0.110425  0.056578  ...  0.115306  0.025799  0.167711   \n",
       "1   -0.004073 -0.011689 -0.007084  ... -0.014438 -0.009642 -0.016246   \n",
       "2    0.229665  0.146032 -0.015136  ...  0.039559 -0.020600  0.028669   \n",
       "3   -0.008703  0.231536 -0.015136  ...  0.109965 -0.020600 -0.034711   \n",
       "4   -0.004073  0.168394 -0.007084  ... -0.014438 -0.009642 -0.016246   \n",
       "..        ...       ...       ...  ...       ...       ...       ...   \n",
       "264 -0.008703  0.060529 -0.015136  ... -0.030847  0.081985 -0.034711   \n",
       "265 -0.014751  0.009842  0.058663  ...  0.076596  0.027679  0.134530   \n",
       "266 -0.009183 -0.026353  0.115259  ... -0.032550  0.075684  0.143943   \n",
       "267 -0.005772 -0.016564 -0.010039  ... -0.020459  0.139425 -0.023022   \n",
       "268 -0.020961  0.248749  0.025949  ...  0.052884  0.135690  0.116751   \n",
       "\n",
       "          263       264       265       266       267       268       269  \n",
       "0    0.014296 -0.015059 -0.032176  0.028190  0.094802 -0.021340  0.075569  \n",
       "1   -0.010911 -0.004073 -0.008703 -0.014751 -0.009183 -0.005772 -0.020961  \n",
       "2   -0.023313 -0.008703 -0.018595  0.037540 -0.019621 -0.012333  0.108543  \n",
       "3   -0.023313 -0.008703 -0.018595  0.037540 -0.019621 -0.012333  0.108543  \n",
       "4   -0.010911 -0.004073 -0.008703 -0.014751 -0.009183 -0.005772  0.086683  \n",
       "..        ...       ...       ...       ...       ...       ...       ...  \n",
       "264  0.067903 -0.008703  1.000000 -0.031517 -0.019621 -0.012333  0.108543  \n",
       "265 -0.039513 -0.014751 -0.031517  1.000000  0.163488 -0.020904  0.017649  \n",
       "266 -0.024599 -0.009183 -0.019621  0.163488  1.000000 -0.013014  0.001280  \n",
       "267 -0.015462 -0.005772 -0.012333 -0.020904 -0.013014  1.000000  0.046567  \n",
       "268  0.108620 -0.020961  0.108543  0.017649  0.001280  0.046567  1.000000  \n",
       "\n",
       "[269 rows x 269 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read correlation matrix\n",
    "corr_mat = pd.read_excel(\"../regression/corr_techniques.xlsx\", sheet_name=\"Sheet1\")\n",
    "corr_mat = corr_mat.drop('Unnamed: 0', 1)\n",
    "corr_mat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Create helper functions\n",
    "- create_starting_population\n",
    "- calculate_fitness\n",
    "- select_individual_by_tournament\n",
    "- select_individual_by_roulette\n",
    "- breed_by_crossover_1point\n",
    "- breed_by_crossover_2point\n",
    "- breed_by_crossover_uniform\n",
    "- randomly_mutate_population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to create a starting population by drawing zeros and ones randomly. Chance for ones is prob_of_ones\n",
    "# individuals: int is number of individuals (=software) to be generated\n",
    "# length_of_techniques: int\n",
    "# percent_of_ones: float\n",
    "def create_starting_population(individuals, length_of_techniques, prob_of_ones=0.04):\n",
    "    #length_of_techniques = len(probs)\n",
    "    size = (individuals, length_of_techniques)\n",
    "    probability = np.array([ 1 - prob_of_ones, prob_of_ones])\n",
    "    \n",
    "    population = np.random.choice([0,1], size=size, p=probability)\n",
    "    \n",
    "    return population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#example starting population\n",
    "#print (create_starting_population(6, len(probs)) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to calculate fitness of every individual in the current population\n",
    "def calculate_fitness(individuals, probs, corr_mat, lamda_balance = 0.2, bonus_factor = 135, penalty_factor = 12, print_out = False):\n",
    "    \n",
    "    len_pop = len(probs)\n",
    "    \n",
    "    individuals = np.array(individuals) # individuals = 6x269\n",
    "    probs = np.array(probs) # array with probabilities\n",
    "    ones = np.ones(len_pop) # number of ones 269x1\n",
    "    \n",
    "    occurrences = (individuals @ ones) # number of ones in individual 6x1\n",
    "    P = individuals # 6x269\n",
    "    \n",
    "    corr = np.array(corr_mat).reshape(len_pop,len_pop)\n",
    "    np.fill_diagonal(corr, 0) # 269x269, correlation matrix with 0 self covariance\n",
    "    A = (P @ corr) # 6x269\n",
    "    K = (P @ A.T) # 6x6\n",
    "    corr_term = K.diagonal()/len_pop # diagonal elements of matrix K \n",
    "\n",
    "    \n",
    "    prob_term = (individuals @ probs) # a includes values between 0 and 1\n",
    "    difference = (np.subtract(occurrences,8)) # here random N(11, 6)\n",
    "\n",
    "    pen_1 = (difference**2) * np.sign(difference)/penalty_factor\n",
    "    pen_1[pen_1 < 0] = 0\n",
    "    \n",
    "    pen_2 = np.copy(difference)/bonus_factor\n",
    "    pen_2[pen_2 > 0] = 0\n",
    "    penalty_term = (pen_1 + pen_2)\n",
    "        \n",
    "    if print_out:\n",
    "        print(\"prob_term\")\n",
    "        print(prob_term)\n",
    "        print(\"\")\n",
    "        print(occurrences)\n",
    "        print(\"difference\")\n",
    "        print(difference)\n",
    "        print(\"penalty_term\")\n",
    "        print(penalty_term)\n",
    "        print(\"corr_term\")\n",
    "        print(corr_term)\n",
    "        print(\"len_pop\")\n",
    "        print(len_pop)\n",
    "        print(\"\")\n",
    "        \n",
    "    fitness_scores = ((lamda_balance * prob_term.T + corr_term * (1-lamda_balance)) - penalty_term)\n",
    "    \n",
    "    return fitness_scores[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#testPop = create_starting_population(6, len(probs))\n",
    "#print('Startpopulation')\n",
    "#print(testPop)\n",
    "\n",
    "#calculate_fitness(testPop, probs, corr_mat, print_out = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#function to select individuals by using tournament selection\n",
    "def select_individual_by_tournament(population, scores):\n",
    "    # get population size\n",
    "    population_size = len(scores)\n",
    "\n",
    "    # pick individuals for tournament\n",
    "    fighter_1 = random.randint(0, population_size-1)\n",
    "    fighter_2 = random.randint(0, population_size-1)\n",
    "    \n",
    "    # get fitness score for each individual\n",
    "    fighter_1_fitness = scores[fighter_1]\n",
    "    fighter_2_fitness = scores[fighter_2]\n",
    "    \n",
    "    # identify undividual with highest fitness\n",
    "    # fighter 1 will win if scores are equal\n",
    "    if fighter_1_fitness >= fighter_2_fitness:\n",
    "        winner = fighter_1\n",
    "    else:\n",
    "        winner = fighter_2\n",
    "    \n",
    "    #return the chromsome of the winner\n",
    "    return population[winner, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#select_individual_by_tournament(testPop, calculate_fitness(testPop, probs, corr_mat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to select individuals by using roulette wheel selection\n",
    "# cannot be used yet, since it does not accept negative fitness values\n",
    "# fitness value will represent the selection probability, which can't be negative\n",
    "# idea1: normalise fitness values\n",
    "# idea2: subtract the lowest (negative) value from all fitness values. The lowest fitness value is now zero.\n",
    "def select_individual_by_roulette(population, k, scores): # list of individuals to select from, number of individuals to select, attribute to use as selection criteria\n",
    "    s_inds = sorted(individuals, key = attrgetter(scores), reverse = True)\n",
    "    sum_sc = sum(getattr(ind, scores).values[0] for ind in population)\n",
    "    chosen = []\n",
    "    for i in range(k):\n",
    "        u = random.random()*sum_sc\n",
    "        sum1 = 0\n",
    "        for ind in s_inds:\n",
    "            sum1 += getattr(ind, scores).values[0]\n",
    "            if sum1 > u:\n",
    "                chosen.append(ind)\n",
    "                break\n",
    "            \n",
    "    return chosen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for executing one point crossover\n",
    "def breed_by_crossover_1point(ind1, ind2):\n",
    "    chromosome_length = min(len(ind1), len(ind2))\n",
    "    crossover_point = random.randint(1, chromosome_length-1)\n",
    "    \n",
    "    ind1[crossover_point:], ind2[crossover_point:] = ind2[crossover_point:], ind1[crossover_point:]\n",
    "    \n",
    "    return ind1, ind2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for executin two point crossover\n",
    "def breed_by_crossover_2point(ind1, ind2):\n",
    "    chromosome_length = min(len(ind1), len(ind2))\n",
    "    crossover_point1 = random.randint(1, chromosome_length)\n",
    "    crossover_point2 = random.randint(1, chromosome_length-1)\n",
    "    \n",
    "    if crossover_point2 >= crossover_point1:\n",
    "        crossover_point2 += 1\n",
    "    else: # swapping the two crossover points\n",
    "        crossover_point1, crossover_point2 = crossover_point2, crossover_point1\n",
    "        \n",
    "    ind1[crossover_point1: crossover_point2], ind2[crossover_point1: crossover_point2] \\\n",
    "        = ind2[crossover_point1: crossover_point2], ind1[crossover_point1: crossover_point2]\n",
    "    \n",
    "    return ind1, ind2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function for executing uniform crossover\n",
    "def breed_by_crossover_uniform(ind1, ind2, indpb):\n",
    "    # parameter indpb is the indipendent probability for each bit to be exchanged\n",
    "    # get length of chromosome\n",
    "    chromosome_length = min(len(ind1), len(ind2))\n",
    "    \n",
    "    for i in range(chromosome_length):\n",
    "        if random.random() < indpb: #add: lower probability that 0 --> 1 than the probability that 1 --> 0\n",
    "             ind1[i], ind2[i] = ind2[i], ind1[i]\n",
    "    return ind1, ind2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to mutate population\n",
    "def randomly_mutate_population(population, mutation_probability):\n",
    "    \n",
    "    # apply random mutation\n",
    "        random_mutation_array = np.random.random(\n",
    "            size=(population.shape))\n",
    "        \n",
    "        random_mutation_boolean = \\\n",
    "            random_mutation_array <= mutation_probability\n",
    "\n",
    "        population[random_mutation_boolean] = \\\n",
    "        np.logical_not(population[random_mutation_boolean])\n",
    "        \n",
    "        # return mutation population\n",
    "        return population"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import operator\n",
    "# class to combine scores, occurrences and population\n",
    "class result:\n",
    "    def __init__(self, score, occurences, population):\n",
    "        self.score = score\n",
    "        self.occurences = occurences\n",
    "        self.population = population"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Run Genetic Algorithm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [],
   "source": [
    "# main algorithm code\n",
    "# set general parameters\n",
    "\n",
    "# toDo, choose cross alogrithm\n",
    "def run_ga(probs, corr_mat, population_size = 20, maximum_generation = 300, mutation_rate =0.001, print_out=False):\n",
    "    chromosome_length = len(probs)\n",
    "    best_score_progress = [] # tracks progress\n",
    "\n",
    "    # create starting population\n",
    "    population = create_starting_population(population_size, chromosome_length)\n",
    "\n",
    "    # print (population)\n",
    "    # display best score in starting population\n",
    "    scores = calculate_fitness(population, probs, corr_mat)\n",
    "    best_score = np.max(scores)\n",
    "\n",
    "    if print_out:\n",
    "        print ('Starting best score: %.1f' %best_score)\n",
    "\n",
    "    # add starting best score to progress tracker\n",
    "    best_score_progress.append(best_score)\n",
    "\n",
    "    # going through the generations of genetic algorithm\n",
    "    for generation in range(maximum_generation):\n",
    "        # create an empty list for new population\n",
    "        new_population = []\n",
    "\n",
    "        # create new popualtion generating two children at a time\n",
    "        for i in range(int(population_size/2)):\n",
    "            parent_1 = select_individual_by_tournament(population, scores)\n",
    "            parent_2 = select_individual_by_tournament(population, scores)\n",
    "            #child_1, child_2 = breed_by_crossover_1point(parent_1, parent_2)\n",
    "            #child_1, child_2 = breed_by_crossover_2point(parent_1, parent_2) # Results are not as promising as with the others\n",
    "            child_1, child_2 = breed_by_crossover_uniform(parent_1, parent_2, 0.5)\n",
    "            new_population.append(child_1)\n",
    "            new_population.append(child_2)\n",
    "\n",
    "        # replace the old population with the new one\n",
    "        population = np.array(new_population)\n",
    "\n",
    "        # apply mutation\n",
    "        population = randomly_mutate_population(population, mutation_rate)\n",
    "\n",
    "        # score best solution, and add to tracker\n",
    "        scores = calculate_fitness(population, probs, corr_mat)\n",
    "        best_score = np.max(scores)\n",
    "        best_score_progress.append(best_score)\n",
    "\n",
    "        # print(best_score)\n",
    "\n",
    "    # GA has completed required generation number\n",
    "\n",
    "    ones = np.ones(len(probs)) # number of ones 269x1\n",
    "    occurrences = (population @ ones)\n",
    "    if print_out:\n",
    "        print ('End best score %.1f' %best_score)\n",
    "        print (occurrences)\n",
    "\n",
    "        # plot progress\n",
    "        %matplotlib inline\n",
    "        plt.plot(best_score_progress)\n",
    "        plt.xlabel('Generation')\n",
    "        plt.ylabel('Best score (% target)')\n",
    "        plt.show()\n",
    "        \n",
    "        # Print out information about best individuum\n",
    "        print('Best score target generation: %.1f' %best_score)\n",
    "        \n",
    "    max_index_row = np.argmax(scores, axis=0)\n",
    "    \n",
    "    if print_out:\n",
    "        print ('Position in Array:', max_index_row)\n",
    "        print(\"Number of Ones:\", occurrences[max_index_row])\n",
    "        print(\"\")\n",
    "        print(\"Respective Chromosome:\", population[max_index_row] )\n",
    "        print(\"\")\n",
    "\n",
    "        print(\"Techniques used:\")\n",
    "        i = 0\n",
    "        for row in probs.index: \n",
    "            if population [max_index_row][i] == 1:\n",
    "                print(row)\n",
    "            i+=1\n",
    "\n",
    "    best_sw = np.tile(population[max_index_row],1) \n",
    "       \n",
    "    \n",
    "    \n",
    "    # sort attribute scores in order to select best X individuums for evaluation\n",
    "    results = []\n",
    "    for i in range(0,len(scores)):\n",
    "    #    print(i)\n",
    "        r1 = result(scores[i], occurrences[i], population[i])\n",
    "        results.append(r1)\n",
    " \n",
    "\n",
    "    sorted_results = sorted(results, key=operator.attrgetter('score'))\n",
    "    predi = sorted_results[-1]\n",
    "    \n",
    "    #print(\"predi\")\n",
    "    #print(predi)\n",
    "    #print(type(predi))\n",
    "    \n",
    "    \n",
    "    #return sorted_results, best_sw\n",
    "    F1, softwareIndex, generatedSoftware = calculate_F_score(y_train, predi.population, do_print=False)\n",
    "    return F1, softwareIndex, generatedSoftware"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Starting best score: 0.1\n",
      "End best score 0.1\n",
      "[ 8.  9.  8.  9.  8.  8. 10.  8.  8.  8.  8.  8. 10.  8.  8.  9.  8.  8.\n",
      "  8.  8.]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score target generation: 0.1\n",
      "Position in Array: 0\n",
      "Number of Ones: 8.0\n",
      "\n",
      "Respective Chromosome: [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
      " 0 0 0 0 0 0 0 0 0 0]\n",
      "\n",
      "Techniques used:\n",
      "T1071.001\n",
      "T1547.001\n",
      "T1059.003\n",
      "T1140\n",
      "T1105\n",
      "T1027\n",
      "T1057\n",
      "T1033\n",
      "<class 'pandas.core.frame.DataFrame'> <class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.631578947368421,\n",
       " 11,\n",
       " array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0]))"
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#sorted_results, best_sw = run_ga(probs, corr_mat, print_out=True)\n",
    "run_ga(probs, corr_mat, print_out=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. evaluate result of GA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in the y_train data set and the predicted software\n",
    "\n",
    "def calculate_F_score(y_train: pd.DataFrame, predicted_sw: np.array, do_print=False):    \n",
    "    #print(type(y_train), type(predicted_sw))\n",
    "    assert y_train.shape[0] == predicted_sw.shape[0]\n",
    "    \n",
    "    ones = np.ones(len(y_train))\n",
    "\n",
    "    occurences = np.array(predicted_sw).T @ ones\n",
    "    \n",
    "    F1_list = []\n",
    "    Software_index = 0\n",
    "    \n",
    "    for software in y_train.columns:\n",
    "        sum_s = y_train[software] @ best_sw\n",
    "\n",
    "        precision = 0\n",
    "        if occurences != 0:\n",
    "            precision = sum_s/occurences\n",
    "        \n",
    "        number_of_techniques_y = y_train[software] @ ones\n",
    "        recall = 0\n",
    "        if number_of_techniques_y != 0:\n",
    "            recall = sum_s/(number_of_techniques_y)\n",
    "        F1 = 0\n",
    "        if (precision + recall) != 0:\n",
    "            F1 = 2 * precision* recall /(precision + recall)\n",
    "            \n",
    "        F1_list.append(F1)\n",
    "    \n",
    "    return max(F1_list), F1_list.index(max(F1_list)) ,best_sw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'> <class 'numpy.ndarray'>\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.6,\n",
       " 11,\n",
       " array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0,\n",
       "        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
       "        0, 0, 0, 0, 0]))"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calculate_F_score(y_train, sorted_results[0].population)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Helper functions optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.2, 135, 12, 0.001, 0.04]"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lamda_balance = 0.2 # 0 - 0.5\n",
    "bonus_factor = 135 # +-20\n",
    "penalty_factor = 12 #+- 5\n",
    "population_size = 20 # ggf in kleinem Rahmen bewegen lassen\n",
    "maximum_generation = 300, # wÃ¼rde ich fix setzen\n",
    "mutation_rate =0.001 # to optimise\n",
    "prob_of_ones=0.04 # mean of ones in X_small\n",
    "\n",
    "startValues = [lamda_balance, bonus_factor, penalty_factor, mutation_rate, prob_of_ones]\n",
    "startValues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((0.01, 0.99), (115, 155), (7, 12), (0.0008, 0.0012), (0.03, 0.05))"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lowerBound = [0.01, 115, 7, 0.0008, 0.03]\n",
    "upperBound = [0.99, 155, 12, 0.0012, 0.05]\n",
    "\n",
    "bounds = tuple((lowerBound[x], upperBound[x]) for x in range(0,len(startValues)))\n",
    "bounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [],
   "source": [
    "def GA_func(params):\n",
    "    assert len(params) == 5\n",
    "    lamda_balance = params[0]\n",
    "    bonus_factor = params[1]\n",
    "    penalty_factor = params[2]\n",
    "    mutation_rate = params[3]\n",
    "    prob_of_ones = params[4]\n",
    "    # ein bester F1 score optimieren ist noch nicht finales Ziel\n",
    "    F1, generated_software = run_ga(probs, corr_mat, population_size = 20, maximum_generation = 30, mutation_rate =mutation_rate, print_out=False)\n",
    "    return F1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.3333333333333333"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GA_func(startValues)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Optimize hyper-parameter of model\n",
    "#### 6.1 local optimizer \"L-BFGS-B\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2.00e-01, 1.35e+02, 1.20e+01, 1.00e-03, 4.00e-02])"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.optimize as sco\n",
    "minimize = sco.minimize(GA_func, x0=startValues, bounds=bounds, method=\"L-BFGS-B\", options={\"gtol\": 1e-12, \"ftol\":1e-12})\n",
    "minimize.x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 6.2 global optimizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "dual_annealing = sco.dual_annealing(GA_func, x0=startValues, bounds=bounds, seed=19937, maxiter=20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([8.28652747e-01, 1.43817614e+02, 7.60972439e+00, 1.14277118e-03,\n",
       "       4.97243779e-02])"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dual_annealing.x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "GA_func(dual_annealing.x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7.  Save series of generated softwares"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "1.142857142857143\n",
      "0.631578947368421\n",
      "0.6666666666666666\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n",
      "0.631578947368421\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>software_0</th>\n",
       "      <th>software_1</th>\n",
       "      <th>software_2</th>\n",
       "      <th>software_3</th>\n",
       "      <th>software_4</th>\n",
       "      <th>software_5</th>\n",
       "      <th>software_6</th>\n",
       "      <th>software_7</th>\n",
       "      <th>software_8</th>\n",
       "      <th>software_9</th>\n",
       "      <th>software_10</th>\n",
       "      <th>software_11</th>\n",
       "      <th>software_12</th>\n",
       "      <th>software_13</th>\n",
       "      <th>software_14</th>\n",
       "      <th>software_15</th>\n",
       "      <th>software_16</th>\n",
       "      <th>software_17</th>\n",
       "      <th>software_18</th>\n",
       "      <th>software_19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   software_0  software_1  software_2  software_3  software_4  software_5  \\\n",
       "0          11          11          11          11          11          11   \n",
       "\n",
       "   software_6  software_7  software_8  software_9  software_10  software_11  \\\n",
       "0          11           2          11           2           11           11   \n",
       "\n",
       "   software_12  software_13  software_14  software_15  software_16  \\\n",
       "0           11           11           11           11           11   \n",
       "\n",
       "   software_17  software_18  software_19  \n",
       "0           11           11           11  "
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "examples_to_save = 20\n",
    "df_to_save = pd.DataFrame([])\n",
    "F1_values = pd.DataFrame([])\n",
    "maxIndexValues = pd.DataFrame([])\n",
    "for i in range(examples_to_save):\n",
    "    F1, maxIndex, generated_software = run_ga(probs, corr_mat)\n",
    "    \n",
    "    df_to_save[f\"software_{i}\"] = generated_software\n",
    "    print(F1)\n",
    "    F1_values[f\"software_{i}\"] = np.array([F1])\n",
    "    maxIndexValues[f\"software_{i}\"] = np.array([maxIndex])\n",
    "\n",
    "maxIndexValues"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>software_0</th>\n",
       "      <th>software_1</th>\n",
       "      <th>software_2</th>\n",
       "      <th>software_3</th>\n",
       "      <th>software_4</th>\n",
       "      <th>software_5</th>\n",
       "      <th>software_6</th>\n",
       "      <th>software_7</th>\n",
       "      <th>software_8</th>\n",
       "      <th>software_9</th>\n",
       "      <th>software_10</th>\n",
       "      <th>software_11</th>\n",
       "      <th>software_12</th>\n",
       "      <th>software_13</th>\n",
       "      <th>software_14</th>\n",
       "      <th>software_15</th>\n",
       "      <th>software_16</th>\n",
       "      <th>software_17</th>\n",
       "      <th>software_18</th>\n",
       "      <th>software_19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.6</td>\n",
       "      <td>0.769231</td>\n",
       "      <td>0.434783</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.769231</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0.631579</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.571429</td>\n",
       "      <td>0.736842</td>\n",
       "      <td>0.714286</td>\n",
       "      <td>0.615385</td>\n",
       "      <td>0.555556</td>\n",
       "      <td>0.615385</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   software_0  software_1  software_2  software_3  software_4  software_5  \\\n",
       "0         0.6    0.769231    0.434783    0.571429         0.5    0.615385   \n",
       "\n",
       "   software_6  software_7  software_8  software_9  software_10  software_11  \\\n",
       "0    0.571429    0.615385    0.666667    0.769231     0.615385     0.631579   \n",
       "\n",
       "   software_12  software_13  software_14  software_15  software_16  \\\n",
       "0     0.615385          0.5     0.571429     0.736842     0.714286   \n",
       "\n",
       "   software_17  software_18  software_19  \n",
       "0     0.615385     0.555556     0.615385  "
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "F1_values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_to_save.append(F1_values).append(maxIndexValues).to_excel('output2.xlsx', engine='xlsxwriter')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
